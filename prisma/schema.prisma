generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String?
  needPasswordChange Boolean?   @default(true)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  role               UserRole
  status             UserStatus @default(ACTIVE)
  admin              Admin?
  doctor             Doctor?
  patient            Patient?
  // profileId          String?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])
}

model Doctor {
  id                  String            @id @default(uuid())
  email               String            @unique
  name                String
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int               @default(0)
  gender              Gender
  apointmentFee       Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [email], references: [email])
  specialties         DoctorSpecialty[]
  DoctorSchedule      DoctorSchedule[]
  Appointment         Appointment[]
  Prescription        Prescription[]
}

model Patient {
  id            String         @id @unique @default(uuid())
  email         String         @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [email], references: [email])
  appointment   Appointment[]
  Prescription  Prescription[]
}

model Specialty {
  id              String            @id @default(uuid())
  title           String            @unique
  icon            String?
  DoctorSpecialty DoctorSpecialty[]
}

model DoctorSpecialty {
  doctorId    String
  specialtyId String
  doctor      Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  specialty   Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)

  @@id([specialtyId, doctorId])
}

model Schedule {
  id             String           @id @default(uuid())
  startDateTime  DateTime
  endDateTime    DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  DoctorSchedule DoctorSchedule[]
  Appointment    Appointment[]
}

model DoctorSchedule {
  doctorId      String
  scheduleId    String
  appointmentId String?
  isBooked      Boolean  @default(false)
  doctor        Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  schedule      Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@id([doctorId, scheduleId])
}

model Appointment {
  id             String            @id @default(uuid())
  patientId      String
  doctorId       String
  scheduleId     String
  videoCallingId String
  status         AppointmentStatus @default(PENDING)
  paymentStatus  PaymentStatus     @default(UNPAID)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  patient        Patient           @relation(fields: [patientId], references: [id])
  doctor         Doctor            @relation(fields: [doctorId], references: [id])
  schedule       Schedule          @relation(fields: [scheduleId], references: [id])
  Payment        Payment[]
  Prescription   Prescription[]
}

model Payment {
  id                 String        @id @default(uuid())
  appointmentId      String
  amount             Float
  transactionId      String        @unique
  status             PaymentStatus @default(UNPAID)
  paymentGatewayData Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  appointment        Appointment   @relation(fields: [appointmentId], references: [id])
}

model Prescription {
  id            String       @id @default(uuid())
  appointmentId String
  doctorId      String
  patientId     String
  issuedAt      DateTime?
  medications   Medication[]
  followUpDate  DateTime?
  notes         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  patient     Patient     @relation(fields: [patientId], references: [id])
}

model Medication {
  id             String  @id @default(uuid())
  prescriptionId String
  name           String
  dosage         String
  frequency      String
  duration       String
  instructions   String?

  prescription Prescription @relation(fields: [prescriptionId], references: [id])
}

enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
  SUPER_ADMIN
}

enum UserStatus {
  BLOCKED
  ACTIVE
  PENDING
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
}
